#! /usr/bin/python

from Tkinter import *
import fieller
import rantest
from data_screen import Data_Screen


__author__="remis"
__date__ ="$30-Apr-2009 14:51:10$"

def on_fieller():

    frame1 = Tk()
    frame1.title('DC_PyPs: Fieller''s test.')
    frame1.geometry('320x500')
    message = Message(frame1, width = 320, text=fieller.introd)
    message.grid(row=0, column=0, rowspan=15, columnspan=4)
    Label(frame1, text="Nominator:").grid(row=15, column=0, columnspan=2)
    Label(frame1, text="SD of Nominator:").grid(row=16, column=0, columnspan=2)
    Label(frame1, text="Denominator:").grid(row=17, column=0, columnspan=2)
    Label(frame1, text="SD of Denominator:").grid(row=18, column=0, columnspan=2)
    Label(frame1, text="Correlation coefficient (nom,denom):").grid(row=19, column=0, columnspan=2)
    Label(frame1, text="Student's t value:").grid(row=20, column=0, columnspan=2)
    Label(frame1, text="").grid(row=21, column=0, columnspan=4)
    e1 = Entry(frame1, justify=CENTER)
    e1.grid(row=15, column=2, sticky=NSEW)
    e1.insert(END, '14')
    e2 = Entry(frame1, justify=CENTER)
    e2.grid(row=16, column=2)
    e2.insert(END, '3')
    e3 = Entry(frame1, justify=CENTER)
    e3.grid(row=17, column=2)
    e3.insert(END, '7')
    e4 = Entry(frame1, justify=CENTER)
    e4.grid(row=18, column=2)
    e4.insert(END, '2')
    e5 = Entry(frame1, justify=CENTER)
    e5.grid(row=19, column=2)
    e5.insert(END, '0')
    e6 = Entry(frame1, justify=CENTER)
    e6.grid(row=20, column=2)
    e6.insert(END, '2')

    def callback1():
        datin = []
        datin.append(float(e1.get()))
        datin.append(float(e3.get()))
        datin.append(float(e2.get()))
        datin.append(float(e4.get()))
        datin.append(float(e5.get()))
        datin.append(float(e6.get()))
        datout = fieller.fieller(datin)
        #show_result(datin, datout)
        disc = datout[0]
        g = datout[1]
        ratio = datout[2]
        clower = datout[3]
        cupper = datout[4]
        dlow = datout[5]
        dhi = datout[6]
        appsd = datout[7]
        cvr = datout[8]
        applo = datout[9]
        apphi = datout[10]
        Label(frame1, text=' Ratio (=a/b) = %f' %ratio).grid(row=24, column=0, columnspan=4)
        Label(frame1, text=' g = %f' %g).grid(row=25, column=0, columnspan=4)
        Label(frame1, text=' Confidence limits: lower %f, upper %f' %(clower, cupper)).grid(row=26, column=0, columnspan=4)
        Label(frame1, text=' i.e deviations: lower %f, upper %f' %(dlow, dhi)).grid(row=27, column=0, columnspan=4)
        Label(frame1, text=' Approximate SD of ratio = %f' %appsd).grid(row=28, column=0, columnspan=4)
        Label(frame1, text=' Approximate CV of ratio = %f' %cvr).grid(row=29, column=0, columnspan=4)
        Label(frame1, text=' Approximate limits: lower %f, upper %f' %(applo, apphi)).grid(row=30, column=0, columnspan=4)

    b1 = Button(frame1, text="CALCULATE", command=callback1).grid(row=22, columnspan=4)
    Label(frame1, text="").grid(row=23, column=0, columnspan=4)
    frame1.mainloop()

def on_rantest_binomial():

    frame3 = Tk()
    frame3.title('DC_PyPs: Randomisation test: binomial data.')
    frame3.geometry('500x700')
    message = Message(frame3, width = 480, text=rantest.introd)
    message.grid(row=0, column=0, rowspan=15, columnspan=4)

    Label(frame3, text="Sample 1").grid(row=15, column=0)
    Label(frame3, text="Sample 1").grid(row=15, column=2)
    Label(frame3, text="Successes:").grid(row=16, column=0)
    Label(frame3, text="Failures:").grid(row=16, column=2)
    Label(frame3, text="").grid(row=17, column=2)
    Label(frame3, text="Sample 2").grid(row=18, column=0)
    Label(frame3, text="Sample 2").grid(row=18, column=2)
    Label(frame3, text="Successes:").grid(row=19, column=0)
    Label(frame3, text="Failures:").grid(row=19, column=2)

    e1 = Entry(frame3, justify=CENTER)
    e1.grid(row=16, column=1)
    e1.insert(END, '3')

    e2 = Entry(frame3, justify=CENTER)
    e2.grid(row=16, column=3)
    e2.insert(END, '4')

    e3 = Entry(frame3, justify=CENTER)
    e3.grid(row=19, column=1)
    e3.insert(END, '4')

    e4 = Entry(frame3, justify=CENTER)
    e4.grid(row=19, column=3)
    e4.insert(END, '5')

    Label(frame3, text="").grid(row=20, column=0, columnspan=2)
    Label(frame3, text="Number of randomisations:").grid(row=21, column=0, columnspan=2)

    e5 = Entry(frame3, justify=CENTER)
    e5.grid(row=21, column=3)
    e5.insert(END, '5000')

    Label(frame3, text="").grid(row=22, column=0, columnspan=2)

    def show_result(ir1, n1, ir2, n2, nran, binom_data):
        p1 = binom_data[0]
        p2 = binom_data[1]
        sd1 = binom_data[2]
        sd2 = binom_data[3]
        P = binom_data[4]
        tval = binom_data[5]
        pg1 = binom_data[6]
        pl1 = binom_data[7]
        pa1 = binom_data[8]
        ne1 = binom_data[9]
        pe1 = binom_data[10]
        ne2 = binom_data[11]
        pe2 = binom_data[12]
        randiff = binom_data[13]

        text01 = ' Set 1: %d successes out of %d; ' %(ir1, n1)
        text02 = ' p1 = %f;   SD(p1) = %f' %(p1, sd1)
        text03 = ' Set 2: %d successes out of %d; ' %(ir2, n2)
        text04 = ' p2 = %f;   SD(p2) = %f' %(p2, sd2)
        text05 = ' Observed difference between sets, p1-p2 = %f' %(p1 -p2)

        Label(frame3, text=text01).grid(row=25, column=0, columnspan=2)
        Label(frame3, text=text02).grid(row=25, column=2, columnspan=2)
        Label(frame3, text=text03).grid(row=26, column=0, columnspan=2)
        Label(frame3, text=text04).grid(row=26, column=2, columnspan=2)
        Label(frame3, text=text05).grid(row=27, column=0, columnspan=4)

        text06 = '\n Observed 2x2 table:'
        text07 = ' Set 1:    %d      %d      %d' %(ir1, n1 - ir1, n1)
        text08 = ' Set 2:    %d      %d      %d' %(ir2, n2 - ir2, n2)
        text09 = ' Total:    %d      %d      %d' %(ir1 + ir2, n1 + n2 - ir1 - ir2, n1 + n2)

        Label(frame3, text=text06).grid(row=28, column=0, columnspan=4)
        Label(frame3, text=text07).grid(row=29, column=0, columnspan=4)
        Label(frame3, text=text08).grid(row=30, column=0, columnspan=4)
        Label(frame3, text=text09).grid(row=31, column=0, columnspan=4)

        text10 = ' \n Two-sample unpaired test using Gaussian approximation to binomial:'
        text11 = ' standard normal deviate = %f; two tail P = %f.' %(tval, P)

        Label(frame3, text=text10).grid(row=32, column=0, columnspan=4)
        Label(frame3, text=text11).grid(row=33, column=0, columnspan=4)

        text14 = '\n %d randomisations' %nran
        text15 = ' P values for difference between sets are:'
        text16 = '  r1 greater than or equal to observed: P = %f' %pg1
        text17 = '  r1 less than or equal to observed: P = %f' %pl1
        text18 = '  r1 equal to observed: number = %d (P = %f)' %(ne1, pe1)

        Label(frame3, text=text14).grid(row=34, column=0, columnspan=4)
        Label(frame3, text=text15).grid(row=35, column=0, columnspan=4)
        Label(frame3, text=text16).grid(row=36, column=0, columnspan=4)
        Label(frame3, text=text17).grid(row=37, column=0, columnspan=4)
        Label(frame3, text=text18).grid(row=38, column=0, columnspan=4)

    def callback3():
        ir1 = int(e1.get())
        if1 = int(e2.get())
        n1 = ir1 + if1
        ir2 = int(e3.get())
        if2 = int(e4.get())
        n2 = ir2 + if2
        nran = int(e5.get())
        result = rantest.rantest_binomial(n1, n2, ir1, ir2, 1, nran)
        show_result(ir1, n1, ir2, n2, nran, result)    #datin, datout)

    b1 = Button(frame3, text="CALCULATE", command=callback3).grid(row=23, columnspan=4)
    Label(frame3, text="").grid(row=24, column=0, columnspan=4)
    frame3.mainloop()

def on_rantest_continuous():

    frame2 = Tk()
    frame2.title('DC_PyPs: Randomisation test: continuously variable data.')
    frame2.geometry('400x650')
    message = Message(frame2, width = 390, text=rantest.introd)
    message.grid(row=0, column=0, rowspan=15, columnspan=4)
    Label(frame2, text="Number of randomisations:").grid(row=16, column=0)
    e5 = Entry(frame2, justify=CENTER)
    e5.grid(row=16, column=1)
    e5.insert(END, '5000')
    var1 = IntVar()
    text1="Paired test?"
    c1=Checkbutton(frame2, text=text1, variable=var1).grid(row=16, column=2, columnspan=2)
    Label(frame2, text="").grid(row=17, column=0, columnspan=2)

    global data_to_calculate
    data_to_calculate = []

    def show_result(result, nran, paired):
        n1 = result[0]
        n2 = result[1]
        xbar = result[2]
        ybar = result[3]
        sdx = result[4]
        sdy = result[5]
        sex = result[6]
        sey = result[7]
        text01 = 'n                  %d                   %d' %(n1, n2)
        text02 = ' Mean        %f            %f' %(xbar, ybar)
        text03 = ' s(x), s(y)   %f            %f' %(sdx, sdy)
        text04 = ' s(x/ybar)   %f            %f' %(sex, sey)
        Label(frame2, text=text01).grid(row=25, column=0, columnspan=4)
        Label(frame2, text=text02).grid(row=26, column=0, columnspan=4)
        Label(frame2, text=text03).grid(row=27, column=0, columnspan=4)
        Label(frame2, text=text04).grid(row=28, column=0, columnspan=4)

        er = 0    # shift of label position
        if n1 == n2:
            er = 2
            dbar = result[8]
            sdd = result[9]
            sed = result[10]
            text05 = ' Mean difference (dbar) = %f' %dbar
            text06 = ' s(d) = %f; s(dbar) = %f' %(sdd, sed)
            Label(frame2, text=text05).grid(row=29, column=0, columnspan=4)
            Label(frame2, text=text06).grid(row=30, column=0, columnspan=4)

        if paired:
            ifpair = result[11]
            ndf = ifpair[0]
            sdbar = ifpair[1]
            tval = ifpair[2]
            text07 = '\n Paired Student''s t test:'
            text08 = ' t(%d)= %f / %f = %f' %(ndf, dbar, sdbar, tval)
            text09 = ' two tail P = %f' %P
            Label(frame2, text=text07).grid(row=31, column=0, columnspan=4)
            Label(frame2, text=text08).grid(row=32, column=0, columnspan=4)
            Label(frame2, text=text09).grid(row=33, column=0, columnspan=4)

        else:
            notpair = []
            if n1 == n2:
                notpair = result[11]
            else:
                notpair = result[8]
            dobs = notpair[0]
            ndf = notpair[1]
            adiff = notpair[2]
            sdiff = notpair[3]
            tval = notpair[4]
            P = notpair[5]

            text07 = ' Observed difference between means= %f' %dobs
            text08 = ' Two-sample unpaired Student''s t test: '
            text09 = '   t(%d) = %f / %f = %f' %(ndf, adiff, sdiff, tval)
            text10 = '   two tail P = %f' %P
            Label(frame2, text=text07).grid(row=(29+er), column=0, columnspan=4)
            Label(frame2, text=text08).grid(row=(30+er), column=0, columnspan=4)
            Label(frame2, text=text09).grid(row=(31+er), column=0, columnspan=4)
            Label(frame2, text=text10).grid(row=(32+er), column=0, columnspan=4)

        rand = []
        if n1 == n2:
            rand = result[12]
        else:
            rand = result[9]
        ng1 = rand[0]
        nl1 = rand[1]
        ne1 = rand[2]
        na1 = rand[3]
        ne2 = rand[4]
        pg1 = rand[5]
        pl1 = rand[6]
        pe1 = rand[7]
        pa1 = rand[8]
        pe2 = rand[9]

        text11 = ' %d randomisations' %nran
        text12 = ' P values for difference between means are:'
        text13 = '  greater than or equal to observed: P = %f' %pg1
        text14 = '  less than or equal to observed: P = %f' %pl1
        text15 = '  greater than or equal in absolute value to observed: P = %f' %pa1
        text16 = ' (Number equal to observed = %d (P= %f)' %(ne1, pe1)
        text17 = ' (Number equal in absolute value to observed = %d (P= %f)' %(ne2, pe2)

        Label(frame2, text='').grid(row=(34+er), column=0, columnspan=4)
        Label(frame2, text=text11).grid(row=(35+er), column=0, columnspan=4)
        Label(frame2, text=text12).grid(row=(36+er), column=0, columnspan=4)
        Label(frame2, text=text13).grid(row=(37+er), column=0, columnspan=4)
        Label(frame2, text=text14).grid(row=(38+er), column=0, columnspan=4)
        Label(frame2, text=text15).grid(row=(39+er), column=0, columnspan=4)
        Label(frame2, text=text16).grid(row=(40+er), column=0, columnspan=4)
        Label(frame2, text=text17).grid(row=(41+er), column=0, columnspan=4)


    def callback2(data):

        paired = 0
        print 'paired =', paired
        paired = var1.get()
        nran = int(e5.get())
        result = rantest.rantest_continuous(data, nran, 1, paired)
        show_result(result, nran, paired)

    def callback1():
        #global data_to_calculate
        from_screen = Data_Screen(frame2)
        n1 = from_screen.n1
        n2 = from_screen.n2
        data = from_screen.data
        #print data
        data1 = data[0:n1]
        data2 = data[n1:n1+n2]
        #print data1
        #print data2
        data_to_calculate = []
        nset = 1    # number of data sets
        data_to_calculate.append(nset)
        paired = 0
        paired = var1.get()
        nran = int(e5.get())
        for j in range(0, nset):
            data_to_calculate.append(n1)
            data_to_calculate.append(n2)
            titled = 'Set'
            titlex = 'Sample 1'
            titley = 'Sample 2'
            data_to_calculate.append(titled)
            data_to_calculate.append(titlex)
            data_to_calculate.append(titley)
            data_to_calculate.append(data1)
            data_to_calculate.append(data2)
        result = rantest.rantest_continuous(data_to_calculate, nran, 1, paired)

        def callback2():

            paired = 0
            print 'paired =', paired
            paired = var1.get()
            nran = int(e5.get())
            result = rantest.rantest_continuous(data, nran, 1, paired)
            show_result(result, nran, paired)

        #b2 = Button(frame2, text="RECALCULATE", command=callback2).grid(row=23, columnspan=4)
        #Label(frame2, text="").grid(row=24, column=0, columnspan=2)
        show_result(result, nran, paired)


    b1 = Button(frame2, text="GET DATA AND CALCULATE", command=callback1).grid(row=21, columnspan=4)
    Label(frame2, text="").grid(row=22, column=0, columnspan=2)
    frame2.mainloop()

def on_CVfit():
    print ''

def on_help():
    print ''

if __name__ == "__main__":

    ### initiate main frame
    master = Tk() #   creates main frame. needs to be shown. see below
    master.title('DC statistics tools')    #   Main frame title
    master.geometry('600x100')
    menubar = Menu(master)

    statmenu = Menu(menubar,tearoff=0)

    statmenu.add_command(label="Fieller", command=on_fieller)

    statmenu.rantest = Menu(statmenu)
    statmenu.rantest.add_command(label="Continuously variable data", command=on_rantest_continuous)
    statmenu.rantest.add_command(label="Binomial data (each result= yes or no)", command=on_rantest_binomial)
    statmenu.add_cascade(label='Randomisation test', menu=statmenu.rantest)

    statmenu.add_command(label="CVfit", command=on_CVfit, state=DISABLED)
    statmenu.add_command(label="Help", command=on_help, state=DISABLED)
    statmenu.add_command(label="Quit!", command=master.quit)

    menubar.add_cascade(label="Statistical Tests", menu=statmenu)

    master.config(menu=menubar)
    message = Message(master, width = 450, text="Welcome! Please select a test to run.")
    message.pack()
    master.mainloop()
